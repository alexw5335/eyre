namespace eyre

import winapi



val className = "MyClass"
val windowName = "MyWindow"

var cursor: qword
var hwnd: qword
var msg: Message
var class: WndClassA
var paintStruct: PaintStruct



proc fatal(32, rsi) {
	mov rsi, rcx
	dllcall GetLastError
	mov edx, eax
	lea rcx, ["A fatal error has occurred (code = %d): %s\n"]
	mov r8, rsi
	dllcall printf
	dllcall ExitProcess
}



proc createCursor(32) {
	xor ecx, ecx
	mov edx, Cursor.ARROW
	dllcall LoadCursorA
	mov [cursor], rax
	cmp rax, 0
	lea rcx, ["Cursor creation failed"]
	je fatal
}



proc createClass(32) {
	// class.className = className
	lea rax, [className]
	mov [class.className], rax

	// class.wndProc = wndProc
	lea rax, [wndProc]
	mov [class.wndProc], rax

	// class.hCursor = cursor
	mov rax, [cursor]
	mov [class.hCursor], rax

	lea rcx, [class]
	dllcall RegisterClassA

	cmp rax, 0
	lea rcx, ["Class creation failed"]
	je fatal
}



proc createWindow(32 + 64 + 8) {
	xor ecx, ecx
	lea rdx, [className]
	lea r8, [windowName]
	mov r9d, WindowStyle.OVERLAPPEDWINDOW
    mov qword [rsp + 32 + 56], 0
    mov qword [rsp + 32 + 48], 0
    mov qword [rsp + 32 + 40], 0
    mov qword [rsp + 32 + 32], 0
    mov qword [rsp + 32 + 24], 600
    mov qword [rsp + 32 + 16], 600
    mov qword [rsp + 32 + 8], 0
    mov qword [rsp + 32 + 0], 0
    dllcall CreateWindowExA
    mov [hwnd], rax
    cmp rax, 0
    lea rcx, ["Window creation failed"]
    je fatal
}



proc wndProc(32) {
	cmp edx, MsgType.DESTROY
	je destroy
	cmp edx, MsgType.PAINT
	je paint
	dllcall DefWindowProcA
	jmp end
destroy:
	xor ecx, ecx
	dllcall PostQuitMessage
	jmp end
paint:
	mov rcx, [hwnd]
	lea rdx, [paintStruct]
	dllcall BeginPaint
	mov rcx, rax
	lea rdx, [paintStruct.rect.left]
	mov r8d, Colour.WINDOW + 1
	dllcall FillRect
	lea rdx, [paintStruct]
	dllcall EndPaint
	jmp end
end:
	return
}



proc showWindow(32) {
	mov rcx, [hwnd]
	mov edx, 1
	dllcall ShowWindow
}



proc windowCycle(32) {
loop:
	lea rcx, [msg]
	xor edx, edx
	xor r8, r8
	xor r9, r9
	dllcall GetMessageA
	cmp rax, 0
	je end
	lea rcx, [msg]
	dllcall TranslateMessage
	lea rcx, [msg]
	dllcall DispatchMessageA
	jmp loop
end:
}



proc main(32) {
	sub rsp, 40
	call createCursor
	call createClass
	call createWindow
	call showWindow
	call windowCycle
	lea rcx, ["Finished\n"]
	dllcall printf
	dllcall ExitProcess
}