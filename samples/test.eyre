namespace eyre

struct InstanceCI {
	dword  type
	qword  pNext
	dword  flags
	qword  pAppInfo
	dword  layerCount
	qword  ppLayerNames
	dword  extensionCount
	qword  ppExtensionNames
}

struct LayerProperties {
	byte[256] name
	dword     specVersion
	dword     incrementalVersion
	byte[256] description
}

enum SType {
	APPLICATION_INFO
	INSTANCE_CREATE_INFO
	DEVICE_QUEUE_CREATE_INFO
	DEVICE_CREATE_INFO
	SUBMIT_INFO
	MEMORY_ALLOCATE_INFO
	MAPPED_MEMORY_RANGE
	BIND_SPARSE_INFO
	FENCE_CREATE_INFO
	SEMAPHORE_CREATE_INFO
	EVENT_CREATE_INFO
}

var layers: qword[] = { "VK_LAYER_KHRONOS_validation" }

var instanceCI: InstanceCI = {
	SType.INSTANCE_CREATE_INFO,
	0,
	0,
	0,
	1,
	layers,
	0,
	0
}

var vulkanDll: qword
var getInstanceProcAddr: qword
var enumerateInstanceVersion: qword
var createInstance: qword
var instanceVersion: dword
var enumerateInstanceLayerProperties: qword
var layerCount: dword
var pLayers: qword
var instance: qword
var enumeratePhysicalDevices: qword
var physicalDeviceCount: dword
var pPhysicalDevices: qword
var physicalDevice: qword



proc main {
	sub rsp, 40

	lea rcx, ["vulkan-1.dll"]
	dllcall LoadLibraryA
	mov [vulkanDll], rax

	lea rcx, ["Vulkan DLL: %p\n"]
	mov rdx, [vulkanDll]
	dllcall printf

	mov rcx, [vulkanDll]
	lea rdx, ["vkGetInstanceProcAddr"]
	dllcall GetProcAddress
	mov [getInstanceProcAddr], rax

	lea rcx, ["vkGetInstanceProcAddr: %p\n"]
	mov rdx, [getInstanceProcAddr]
	dllcall printf

	xor ecx, ecx
	lea rdx, ["vkEnumerateInstanceVersion"]
	call [getInstanceProcAddr]
	mov [enumerateInstanceVersion], rax

	lea rcx, ["vkEnumerateInstanceVersion: %p\n"]
	mov rdx, [enumerateInstanceVersion]
	dllcall printf

	xor ecx, ecx
	lea rdx, ["vkCreateInstance"]
	call [getInstanceProcAddr]
	mov [createInstance], rax

	lea rcx, ["vkCreateInstance: %p\n"]
	mov rdx, [createInstance]
	dllcall printf

	xor ecx, ecx
	lea rdx, ["vkEnumerateInstanceLayerProperties"]
	call [getInstanceProcAddr]
	mov [enumerateInstanceLayerProperties], rax

	lea rcx, ["vkEnumerateInstanceLayerProperties: %p\n"]
	mov rdx, [enumerateInstanceLayerProperties]
	dllcall printf

	lea rcx, [layerCount]
	xor edx, edx
	call [enumerateInstanceLayerProperties]

	lea rcx, ["layerCount: %d\n"]
	mov edx, [layerCount]
	dllcall printf

	mov ecx, [layerCount]
	imul ecx, LayerProperties::size
	dllcall malloc
	mov [pLayers], rax

	lea rcx, [layerCount]
	mov rdx, [pLayers]
	call [enumerateInstanceLayerProperties]

	lea rcx, [instanceCI]
	xor edx, edx
	lea r8, [instance]
	call [createInstance]
	mov rdx, rax
	lea rcx, ["VkCreateInstance result: %d\n"]
	dllcall printf

	mov rcx, [instance]
	lea rdx, ["vkEnumeratePhysicalDevices"]
	call [getInstanceProcAddr]
	mov [enumeratePhysicalDevices], rax
	lea rcx, ["vkEnumeratePhysicalDevices: %p\n"]
	mov rdx, [enumeratePhysicalDevices]
	dllcall printf

	mov rcx, [instance]
	lea rdx, [physicalDeviceCount]
	xor r8, r8
	call [enumeratePhysicalDevices]

	lea rcx, ["physicalDeviceCount: %d\n"]
	mov edx, [physicalDeviceCount]
	dllcall printf

	mov ecx, [physicalDeviceCount]
	shl rcx, 3
	dllcall malloc
	mov [pPhysicalDevices], rax

	mov rcx, [instance]
	lea rdx, [physicalDeviceCount]
	lea r8, [pPhysicalDevices]
	call [enumeratePhysicalDevices]

	mov rcx, [pPhysicalDevices]
	mov [physicalDevice], rcx

	lea rcx, ["FINISHED\n"]
	dllcall printf
	dllcall ExitProcess
}