namespace main



struct InstanceCI {
	i32 sType
	i64 pNext
	i32 flags
	i64 appInfo
	i32 layerCount
	i64 layerNames
	i32 extensionCount
	i64 extensionNames
}



var vulkanDll: qword
var vkGetInstanceProcAddr: qword
var vkEnumerateInstanceVersion: qword
var instanceVersion: dword
var vkCreateInstance: qword
var instance: qword

var layerNames: qword[1] = {
	"VK_LAYER_KHRONOS_validation"
}

var extensionNames: qword[1] = {
	"VK_EXT_debug_utils"
}

var instanceCI: InstanceCI = {
	sType = 1,
	layerCount = layerNames::count,
	layerNames = layerNames,
	extensionCount = extensionNames::count,
	extensionNames = extensionNames,
}



proc main(40) {
	lea rcx, ["vulkan-1"]
	dllcall LoadLibraryA
	mov [vulkanDll], rax
	lea rcx, ["vulkanDll: %p\n"]
	mov rdx, [vulkanDll]
	dllcall printf

	mov rcx, [vulkanDll]
	lea rdx, ["vkGetInstanceProcAddr"]
	dllcall GetProcAddress
	mov [vkGetInstanceProcAddr], rax
	lea rcx, ["vkGetInstanceProcAddr: %p\n"]
	mov rdx, [vkGetInstanceProcAddr]
	dllcall printf

	xor ecx, ecx
	lea rdx, ["vkEnumerateInstanceVersion"]
	call qword [vkGetInstanceProcAddr]
	mov [vkEnumerateInstanceVersion], rax
	lea rcx, ["vkEnumerateInstanceVersion: %p\n"]
	mov rdx, [vkEnumerateInstanceVersion]
	dllcall printf

	lea rcx, [instanceVersion]
	call qword [vkEnumerateInstanceVersion]
	lea rcx, ["Instance version: %d\n"]
	mov edx, dword [instanceVersion]
	dllcall printf

	xor ecx, ecx
	lea rdx, ["vkCreateInstance"]
	call qword [vkGetInstanceProcAddr]
	mov [vkCreateInstance], rax
	lea rcx, ["vkCreateInstance: %p\n"]
	mov rdx, [vkCreateInstance]
	dllcall printf

	lea rcx, [instanceCI]
	xor edx, edx
	lea r8, [instance]
	call qword [vkCreateInstance]
	lea rcx, ["Instance: %p\n"]
	mov rdx, [instance]
	dllcall printf

	dllcall ExitProcess
}