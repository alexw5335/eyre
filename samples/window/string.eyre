namespace string

const bufferCapacity = 512
var buffer res bufferCapacity
var bufferPos dq 0



// rcx: int
proc printInt {
	sub rsp, 40
	mov edx, 10
	call appendInt
	call newline
	call printBuffer
	call reset
	add rsp, 40
	ret
}



proc reset {
	mov qword [bufferPos], 0
}



// No args
proc printBuffer {
	sub rsp, 40
	lea rcx, [buffer]
	mov rdx, [bufferPos]
	call stdlib.print
	add rsp, 40
	ret
}



// rcx: data
// rdx: size
proc append {
	mov rsi, rcx
	lea rdi, [buffer]
	add rdi, [bufferPos]
	mov ecx, edx
	rep movsb
	add [bufferPos], edx
	ret
}



// no params
proc newline {
	lea rcx, [buffer]
	add rcx, [bufferPos]
	mov byte [rcx], '\n'
	add qword [bufferPos], 1
	ret
}



// rcx: string (null-terminated or of length 8)
proc appendRegString {
    bsr rax, rcx
    add rax, 7
    and rax, -8
    shr rax, 3 // length in rax
    lea rdx, [buffer]
    add rdx, [bufferPos]
    mov [rdx], rcx
    add [bufferPos], rax
    ret
}



// rcx: value
// rdx: radix
proc appendInt {
	sub rsp, 40
	lea r9, [buffer]
	add r9, [bufferPos]
	test rcx, rcx
	jns positive
	mov byte [r9], '-'
	add qword [bufferPos], 1
	add r9, 1
positive:
	call appendIntRaw
	add rsp, 40
	ret
}



// rcx: value
// rdx: radix
proc appendIntRaw {
	cmp rcx, 0
	jne nonZero
	lea r9, [buffer]
	add r9, [bufferPos]
	mov byte [r9], '0'
	add qword [bufferPos], 1
	ret
nonZero:
	push rsi
	mov rsi, rdx
	xor r10, r10
	xor r11, r11
	mov r9, [bufferPos]
	lea r9, [buffer]
	add r9, [bufferPos]
	mov rax, rcx
loop1:
	cqo
	idiv rsi
	add r10, 1
	cmp rax, 0
	jnz loop1
    mov rax, rcx
loop2:
	cqo
	idiv rsi
	test rdx, rdx
	jns positive
	neg rdx
positive:
	cmp dl, 9
	jbe decimal
	add dl, 'A' - '0' - 10
decimal:
	add dl, '0'
	add r11, 1
	mov r8, r10
	sub r8, r11
	mov [r9 + r8], dl
	cmp rax, 0
	jnz loop2
	add [bufferPos], r11
	pop rsi
	ret
}