package eyre



sealed interface Register



enum class RegType {
	GP, SEG, ST, MMX, SSE;
}



enum class Reg(
	val type: RegType,
	val width: Width,
	val value: Int,
	val rex: Int,
	val high: Int,
	val isRex8: Boolean = false,
	val noRex: Boolean = false
) {

	RAX(RegType.GP, Width.QWORD, 0, 0, 0),
	RCX(RegType.GP, Width.QWORD, 1, 0, 0),
	RDX(RegType.GP, Width.QWORD, 2, 0, 0),
	RBX(RegType.GP, Width.QWORD, 3, 0, 0),
	RSP(RegType.GP, Width.QWORD, 4, 0, 0),
	RBP(RegType.GP, Width.QWORD, 5, 0, 0),
	RSI(RegType.GP, Width.QWORD, 6, 0, 0),
	RDI(RegType.GP, Width.QWORD, 7, 0, 0),
	R8 (RegType.GP, Width.QWORD, 0, 1, 0),
	R9 (RegType.GP, Width.QWORD, 1, 1, 0),
	R10(RegType.GP, Width.QWORD, 2, 1, 0),
	R11(RegType.GP, Width.QWORD, 3, 1, 0),
	R12(RegType.GP, Width.QWORD, 4, 1, 0),
	R13(RegType.GP, Width.QWORD, 5, 1, 0),
	R14(RegType.GP, Width.QWORD, 6, 1, 0),
	R15(RegType.GP, Width.QWORD, 7, 1, 0),

	EAX (RegType.GP, Width.DWORD, 0, 0, 0),
	ECX (RegType.GP, Width.DWORD, 1, 0, 0),
	EDX (RegType.GP, Width.DWORD, 2, 0, 0),
	EBX (RegType.GP, Width.DWORD, 3, 0, 0),
	ESP (RegType.GP, Width.DWORD, 4, 0, 0),
	EBP (RegType.GP, Width.DWORD, 5, 0, 0),
	ESI (RegType.GP, Width.DWORD, 6, 0, 0),
	EDI (RegType.GP, Width.DWORD, 7, 0, 0),
	R8D (RegType.GP, Width.DWORD, 0, 1, 0),
	R9D (RegType.GP, Width.DWORD, 1, 1, 0),
	R10D(RegType.GP, Width.DWORD, 2, 1, 0),
	R11D(RegType.GP, Width.DWORD, 3, 1, 0),
	R12D(RegType.GP, Width.DWORD, 4, 1, 0),
	R13D(RegType.GP, Width.DWORD, 5, 1, 0),
	R14D(RegType.GP, Width.DWORD, 6, 1, 0),
	R15D(RegType.GP, Width.DWORD, 7, 1, 0),

	AX  (RegType.GP, Width.WORD, 0, 0, 0),
	CX  (RegType.GP, Width.WORD, 1, 0, 0),
	DX  (RegType.GP, Width.WORD, 2, 0, 0),
	BX  (RegType.GP, Width.WORD, 3, 0, 0),
	SP  (RegType.GP, Width.WORD, 4, 0, 0),
	BP  (RegType.GP, Width.WORD, 5, 0, 0),
	SI  (RegType.GP, Width.WORD, 6, 0, 0),
	DI  (RegType.GP, Width.WORD, 7, 0, 0),
	R8W (RegType.GP, Width.WORD, 0, 1, 0),
	R9W (RegType.GP, Width.WORD, 1, 1, 0),
	R10W(RegType.GP, Width.WORD, 2, 1, 0),
	R11W(RegType.GP, Width.WORD, 3, 1, 0),
	R12W(RegType.GP, Width.WORD, 4, 1, 0),
	R13W(RegType.GP, Width.WORD, 5, 1, 0),
	R14W(RegType.GP, Width.WORD, 6, 1, 0),
	R15W(RegType.GP, Width.WORD, 7, 1, 0),

	AL  (RegType.GP, Width.BYTE, 0, 0, 0),
	CL  (RegType.GP, Width.BYTE, 1, 0, 0),
	DL  (RegType.GP, Width.BYTE, 2, 0, 0),
	BL  (RegType.GP, Width.BYTE, 3, 0, 0),
	AH  (RegType.GP, Width.BYTE, 4, 0, 0, isRex8 = true),
	BH  (RegType.GP, Width.BYTE, 5, 0, 0, isRex8 = true),
	CH  (RegType.GP, Width.BYTE, 6, 0, 0, isRex8 = true),
	DH  (RegType.GP, Width.BYTE, 7, 0, 0, isRex8 = true),
	R8B (RegType.GP, Width.BYTE, 0, 1, 0),
	R9B (RegType.GP, Width.BYTE, 1, 1, 0),
	R10B(RegType.GP, Width.BYTE, 2, 1, 0),
	R11B(RegType.GP, Width.BYTE, 3, 1, 0),
	R12B(RegType.GP, Width.BYTE, 4, 1, 0),
	R13B(RegType.GP, Width.BYTE, 5, 1, 0),
	R14B(RegType.GP, Width.BYTE, 6, 1, 0),
	R15B(RegType.GP, Width.BYTE, 7, 1, 0),
	
	SPL(RegType.GP, Width.BYTE, 0, 1, 0, noRex = true),
	BPL(RegType.GP, Width.BYTE, 1, 1, 0, noRex = true),
	SIL(RegType.GP, Width.BYTE, 2, 1, 0, noRex = true),
	DIL(RegType.GP, Width.BYTE, 3, 1, 0, noRex = true),

	FS(RegType.SEG, Width.WORD, 0, 0, 0),
	GS(RegType.SEG, Width.WORD, 0, 0, 0),
	
	MM0(RegType.MMX, Width.QWORD, 0, 0, 0),
	MM1(RegType.MMX, Width.QWORD, 1, 0, 0),
	MM2(RegType.MMX, Width.QWORD, 2, 0, 0),
	MM3(RegType.MMX, Width.QWORD, 3, 0, 0),
	MM4(RegType.MMX, Width.QWORD, 4, 0, 0),
	MM5(RegType.MMX, Width.QWORD, 5, 0, 0),
	MM6(RegType.MMX, Width.QWORD, 6, 0, 0),
	MM7(RegType.MMX, Width.QWORD, 7, 0, 0),
	
	XMM0 (RegType.SSE, Width.XWORD, 0, 0, 0),
	XMM1 (RegType.SSE, Width.XWORD, 1, 0, 0),
	XMM2 (RegType.SSE, Width.XWORD, 2, 0, 0),
	XMM3 (RegType.SSE, Width.XWORD, 3, 0, 0),
	XMM4 (RegType.SSE, Width.XWORD, 4, 0, 0),
	XMM5 (RegType.SSE, Width.XWORD, 5, 0, 0),
	XMM6 (RegType.SSE, Width.XWORD, 6, 0, 0),
	XMM7 (RegType.SSE, Width.XWORD, 7, 0, 0),
	XMM8 (RegType.SSE, Width.XWORD, 0, 1, 0),
	XMM9 (RegType.SSE, Width.XWORD, 1, 1, 0),
	XMM10(RegType.SSE, Width.XWORD, 2, 1, 0),
	XMM11(RegType.SSE, Width.XWORD, 3, 1, 0),
	XMM12(RegType.SSE, Width.XWORD, 4, 1, 0),
	XMM13(RegType.SSE, Width.XWORD, 5, 1, 0),
	XMM14(RegType.SSE, Width.XWORD, 6, 1, 0),
	XMM15(RegType.SSE, Width.XWORD, 7, 1, 0),
	XMM16(RegType.SSE, Width.XWORD, 0, 0, 1),
	XMM17(RegType.SSE, Width.XWORD, 1, 0, 1),
	XMM18(RegType.SSE, Width.XWORD, 2, 0, 1),
	XMM19(RegType.SSE, Width.XWORD, 3, 0, 1),
	XMM20(RegType.SSE, Width.XWORD, 4, 0, 1),
	XMM21(RegType.SSE, Width.XWORD, 5, 0, 1),
	XMM22(RegType.SSE, Width.XWORD, 6, 0, 1),
	XMM23(RegType.SSE, Width.XWORD, 7, 0, 1),
	XMM24(RegType.SSE, Width.XWORD, 0, 1, 1),
	XMM25(RegType.SSE, Width.XWORD, 1, 1, 1),
	XMM26(RegType.SSE, Width.XWORD, 2, 1, 1),
	XMM27(RegType.SSE, Width.XWORD, 3, 1, 1),
	XMM28(RegType.SSE, Width.XWORD, 4, 1, 1),
	XMM29(RegType.SSE, Width.XWORD, 5, 1, 1),
	XMM30(RegType.SSE, Width.XWORD, 6, 1, 1),
	XMM31(RegType.SSE, Width.XWORD, 7, 1, 1),

	YMM0 (RegType.SSE, Width.YWORD, 0, 0, 0),
	YMM1 (RegType.SSE, Width.YWORD, 1, 0, 0),
	YMM2 (RegType.SSE, Width.YWORD, 2, 0, 0),
	YMM3 (RegType.SSE, Width.YWORD, 3, 0, 0),
	YMM4 (RegType.SSE, Width.YWORD, 4, 0, 0),
	YMM5 (RegType.SSE, Width.YWORD, 5, 0, 0),
	YMM6 (RegType.SSE, Width.YWORD, 6, 0, 0),
	YMM7 (RegType.SSE, Width.YWORD, 7, 0, 0),
	YMM8 (RegType.SSE, Width.YWORD, 0, 1, 0),
	YMM9 (RegType.SSE, Width.YWORD, 1, 1, 0),
	YMM10(RegType.SSE, Width.YWORD, 2, 1, 0),
	YMM11(RegType.SSE, Width.YWORD, 3, 1, 0),
	YMM12(RegType.SSE, Width.YWORD, 4, 1, 0),
	YMM13(RegType.SSE, Width.YWORD, 5, 1, 0),
	YMM14(RegType.SSE, Width.YWORD, 6, 1, 0),
	YMM15(RegType.SSE, Width.YWORD, 7, 1, 0),
	YMM16(RegType.SSE, Width.YWORD, 0, 0, 1),
	YMM17(RegType.SSE, Width.YWORD, 1, 0, 1),
	YMM18(RegType.SSE, Width.YWORD, 2, 0, 1),
	YMM19(RegType.SSE, Width.YWORD, 3, 0, 1),
	YMM20(RegType.SSE, Width.YWORD, 4, 0, 1),
	YMM21(RegType.SSE, Width.YWORD, 5, 0, 1),
	YMM22(RegType.SSE, Width.YWORD, 6, 0, 1),
	YMM23(RegType.SSE, Width.YWORD, 7, 0, 1),
	YMM24(RegType.SSE, Width.YWORD, 0, 1, 1),
	YMM25(RegType.SSE, Width.YWORD, 1, 1, 1),
	YMM26(RegType.SSE, Width.YWORD, 2, 1, 1),
	YMM27(RegType.SSE, Width.YWORD, 3, 1, 1),
	YMM28(RegType.SSE, Width.YWORD, 4, 1, 1),
	YMM29(RegType.SSE, Width.YWORD, 5, 1, 1),
	YMM30(RegType.SSE, Width.YWORD, 6, 1, 1),
	YMM31(RegType.SSE, Width.YWORD, 7, 1, 1),

	ZMM0 (RegType.SSE, Width.ZWORD, 0, 0, 0),
	ZMM1 (RegType.SSE, Width.ZWORD, 1, 0, 0),
	ZMM2 (RegType.SSE, Width.ZWORD, 2, 0, 0),
	ZMM3 (RegType.SSE, Width.ZWORD, 3, 0, 0),
	ZMM4 (RegType.SSE, Width.ZWORD, 4, 0, 0),
	ZMM5 (RegType.SSE, Width.ZWORD, 5, 0, 0),
	ZMM6 (RegType.SSE, Width.ZWORD, 6, 0, 0),
	ZMM7 (RegType.SSE, Width.ZWORD, 7, 0, 0),
	ZMM8 (RegType.SSE, Width.ZWORD, 0, 1, 0),
	ZMM9 (RegType.SSE, Width.ZWORD, 1, 1, 0),
	ZMM10(RegType.SSE, Width.ZWORD, 2, 1, 0),
	ZMM11(RegType.SSE, Width.ZWORD, 3, 1, 0),
	ZMM12(RegType.SSE, Width.ZWORD, 4, 1, 0),
	ZMM13(RegType.SSE, Width.ZWORD, 5, 1, 0),
	ZMM14(RegType.SSE, Width.ZWORD, 6, 1, 0),
	ZMM15(RegType.SSE, Width.ZWORD, 7, 1, 0),
	ZMM16(RegType.SSE, Width.ZWORD, 0, 0, 1),
	ZMM17(RegType.SSE, Width.ZWORD, 1, 0, 1),
	ZMM18(RegType.SSE, Width.ZWORD, 2, 0, 1),
	ZMM19(RegType.SSE, Width.ZWORD, 3, 0, 1),
	ZMM20(RegType.SSE, Width.ZWORD, 4, 0, 1),
	ZMM21(RegType.SSE, Width.ZWORD, 5, 0, 1),
	ZMM22(RegType.SSE, Width.ZWORD, 6, 0, 1),
	ZMM23(RegType.SSE, Width.ZWORD, 7, 0, 1),
	ZMM24(RegType.SSE, Width.ZWORD, 0, 1, 1),
	ZMM25(RegType.SSE, Width.ZWORD, 1, 1, 1),
	ZMM26(RegType.SSE, Width.ZWORD, 2, 1, 1),
	ZMM27(RegType.SSE, Width.ZWORD, 3, 1, 1),
	ZMM28(RegType.SSE, Width.ZWORD, 4, 1, 1),
	ZMM29(RegType.SSE, Width.ZWORD, 5, 1, 1),
	ZMM30(RegType.SSE, Width.ZWORD, 6, 1, 1),
	ZMM31(RegType.SSE, Width.ZWORD, 7, 1, 1),
	
}



enum class SegReg : Register {
	FS,
	GS;
	val string = name.lowercase()
}



enum class SseReg(
	val value : Int,
	val rex   : Int,
	val high  : Int,
	val width : Width
) : Register {

	MM0(0, 0, 0, Width.QWORD),
	MM1(1, 0, 0, Width.QWORD),
	MM2(2, 0, 0, Width.QWORD),
	MM3(3, 0, 0, Width.QWORD),
	MM4(4, 0, 0, Width.QWORD),
	MM5(5, 0, 0, Width.QWORD),
	MM6(6, 0, 0, Width.QWORD),
	MM7(7, 0, 0, Width.QWORD),

	XMM0(0, 0, 0, Width.XWORD),
	XMM1(1, 0, 0, Width.XWORD),
	XMM2(2, 0, 0, Width.XWORD),
	XMM3(3, 0, 0, Width.XWORD),
	XMM4(4, 0, 0, Width.XWORD),
	XMM5(5, 0, 0, Width.XWORD),
	XMM6(6, 0, 0, Width.XWORD),
	XMM7(0, 0, 0, Width.XWORD),
	XMM8(0, 1, 0, Width.XWORD),
	XMM9(0, 1, 0, Width.XWORD),
	XMM10(0, 1, 0, Width.XWORD),
	XMM11(0, 1, 0, Width.XWORD),
	XMM12(0, 1, 0, Width.XWORD),
	XMM13(0, 1, 0, Width.XWORD),
	XMM14(0, 1, 0, Width.XWORD),
	XMM15(0, 1, 0, Width.XWORD),
	XMM16(0, 0, 1, Width.XWORD),
	XMM17(0, 0, 1, Width.XWORD),
	XMM18(0, 0, 1, Width.XWORD),
	XMM19(0, 0, 1, Width.XWORD),
	XMM20(0, 0, 1, Width.XWORD),
	XMM21(0, 0, 1, Width.XWORD),
	XMM22(0, 0, 1, Width.XWORD),
	XMM23(0, 0, 1, Width.XWORD),
	XMM24(0, 1, 1, Width.XWORD),
	XMM25(0, 1, 1, Width.XWORD),
	XMM26(0, 1, 1, Width.XWORD),
	XMM27(0, 1, 1, Width.XWORD),
	XMM28(0, 1, 1, Width.XWORD),
	XMM29(0, 1, 1, Width.XWORD),
	XMM30(0, 1, 1, Width.XWORD),
	XMM31(0, 1, 1, Width.XWORD),

	YMM0(0, 0, 0, Width.YWORD),
	YMM1(1, 0, 0, Width.YWORD),
	YMM2(2, 0, 0, Width.YWORD),
	YMM3(3, 0, 0, Width.YWORD),
	YMM4(4, 0, 0, Width.YWORD),
	YMM5(5, 0, 0, Width.YWORD),
	YMM6(6, 0, 0, Width.YWORD),
	YMM7(0, 0, 0, Width.YWORD),
	YMM8(0, 1, 0, Width.YWORD),
	YMM9(0, 1, 0, Width.YWORD),
	YMM10(0, 1, 0, Width.YWORD),
	YMM11(0, 1, 0, Width.YWORD),
	YMM12(0, 1, 0, Width.YWORD),
	YMM13(0, 1, 0, Width.YWORD),
	YMM14(0, 1, 0, Width.YWORD),
	YMM15(0, 1, 0, Width.YWORD),
	YMM16(0, 0, 1, Width.YWORD),
	YMM17(0, 0, 1, Width.YWORD),
	YMM18(0, 0, 1, Width.YWORD),
	YMM19(0, 0, 1, Width.YWORD),
	YMM20(0, 0, 1, Width.YWORD),
	YMM21(0, 0, 1, Width.YWORD),
	YMM22(0, 0, 1, Width.YWORD),
	YMM23(0, 0, 1, Width.YWORD),
	YMM24(0, 1, 1, Width.YWORD),
	YMM25(0, 1, 1, Width.YWORD),
	YMM26(0, 1, 1, Width.YWORD),
	YMM27(0, 1, 1, Width.YWORD),
	YMM28(0, 1, 1, Width.YWORD),
	YMM29(0, 1, 1, Width.YWORD),
	YMM30(0, 1, 1, Width.YWORD),
	YMM31(0, 1, 1, Width.YWORD),

	ZMM0(0, 0, 0, Width.ZWORD),
	ZMM1(1, 0, 0, Width.ZWORD),
	ZMM2(2, 0, 0, Width.ZWORD),
	ZMM3(3, 0, 0, Width.ZWORD),
	ZMM4(4, 0, 0, Width.ZWORD),
	ZMM5(5, 0, 0, Width.ZWORD),
	ZMM6(6, 0, 0, Width.ZWORD),
	ZMM7(0, 0, 0, Width.ZWORD),
	ZMM8(0, 1, 0, Width.ZWORD),
	ZMM9(0, 1, 0, Width.ZWORD),
	ZMM10(0, 1, 0, Width.ZWORD),
	ZMM11(0, 1, 0, Width.ZWORD),
	ZMM12(0, 1, 0, Width.ZWORD),
	ZMM13(0, 1, 0, Width.ZWORD),
	ZMM14(0, 1, 0, Width.ZWORD),
	ZMM15(0, 1, 0, Width.ZWORD),
	ZMM16(0, 0, 1, Width.ZWORD),
	ZMM17(0, 0, 1, Width.ZWORD),
	ZMM18(0, 0, 1, Width.ZWORD),
	ZMM19(0, 0, 1, Width.ZWORD),
	ZMM20(0, 0, 1, Width.ZWORD),
	ZMM21(0, 0, 1, Width.ZWORD),
	ZMM22(0, 0, 1, Width.ZWORD),
	ZMM23(0, 0, 1, Width.ZWORD),
	ZMM24(0, 1, 1, Width.ZWORD),
	ZMM25(0, 1, 1, Width.ZWORD),
	ZMM26(0, 1, 1, Width.ZWORD),
	ZMM27(0, 1, 1, Width.ZWORD),
	ZMM28(0, 1, 1, Width.ZWORD),
	ZMM29(0, 1, 1, Width.ZWORD),
	ZMM30(0, 1, 1, Width.ZWORD),
	ZMM31(0, 1, 1, Width.ZWORD);

	val string = name.lowercase()

}



enum class StReg(val value: Int) : Register {

	ST0(0),
	ST1(1),
	ST2(2),
	ST3(3),
	ST4(4),
	ST5(5),
	ST6(6),
	ST7(7);

	val string = name.lowercase()

}



enum class MmxReg(val value: Int) : Register {

	MM0(0),
	MM1(1),
	MM2(2),
	MM3(3),
	MM4(4),
	MM5(5),
	MM6(6),
	MM7(7);

	val string = name.lowercase()

}



enum class GpReg(
	val value  : Int,
	val width  : Width,
	val rex    : Int = 0,
	val isA    : Boolean = false,
	val isSP   : Boolean = false,
	val rex8   : Boolean = false,
	val noRex8 : Boolean = false
) : Register {

	RAX(0, Width.QWORD, isA = true),
	RCX(1, Width.QWORD),
	RDX(2, Width.QWORD),
	RBX(3, Width.QWORD),
	RSP(4, Width.QWORD, isSP = true),
	RBP(5, Width.QWORD),
	RSI(6, Width.QWORD),
	RDI(7, Width.QWORD),
	R8 (0, Width.QWORD, 1),
	R9 (1, Width.QWORD, 1),
	R10(2, Width.QWORD, 1),
	R11(3, Width.QWORD, 1),
	R12(4, Width.QWORD, 1),
	R13(5, Width.QWORD, 1),
	R14(6, Width.QWORD, 1),
	R15(7, Width.QWORD, 1),

	EAX (0, Width.DWORD, isA = true),
	ECX (1, Width.DWORD),
	EDX (2, Width.DWORD),
	EBX (3, Width.DWORD),
	ESP (4, Width.DWORD, isSP = true),
	EBP (5, Width.DWORD),
	ESI (6, Width.DWORD),
	EDI (7, Width.DWORD),
	R8D (0, Width.DWORD, 1),
	R9D (1, Width.DWORD, 1),
	R10D(2, Width.DWORD, 1),
	R11D(3, Width.DWORD, 1),
	R12D(4, Width.DWORD, 1),
	R13D(5, Width.DWORD, 1),
	R14D(6, Width.DWORD, 1),
	R15D(7, Width.DWORD, 1),

	AX  (0, Width.WORD, isA = true),
	CX  (1, Width.WORD),
	DX  (2, Width.WORD),
	BX  (3, Width.WORD),
	SP  (4, Width.WORD, isSP = true),
	BP  (5, Width.WORD),
	SI  (6, Width.WORD),
	DI  (7, Width.WORD),
	R8W (0, Width.WORD, 1),
	R9W (1, Width.WORD, 1),
	R10W(2, Width.WORD, 1),
	R11W(3, Width.WORD, 1),
	R12W(4, Width.WORD, 1),
	R13W(5, Width.WORD, 1),
	R14W(6, Width.WORD, 1),
	R15W(7, Width.WORD, 1),

	AL  (0, Width.BYTE, isA = true),
	CL  (1, Width.BYTE),
	DL  (2, Width.BYTE),
	BL  (3, Width.BYTE),
	AH  (4, Width.BYTE, rex8 = true),
	CH  (5, Width.BYTE, rex8 = true),
	DH  (6, Width.BYTE, rex8 = true),
	BH  (7, Width.BYTE, rex8 = true),
	R8B (0, Width.BYTE, 1),
	R9B (1, Width.BYTE, 1),
	R10B(2, Width.BYTE, 1),
	R11B(3, Width.BYTE, 1),
	R12B(4, Width.BYTE, 1),
	R13B(5, Width.BYTE, 1),
	R14B(6, Width.BYTE, 1),
	R15B(7, Width.BYTE, 1),

	SPL(4, Width.BYTE, isSP = true, noRex8 = true),
	BPL(5, Width.BYTE, noRex8 = true),
	SIL(6, Width.BYTE, noRex8 = true),
	DIL(7, Width.BYTE, noRex8 = true);

	val string = name.lowercase()

	val invalidBase get() = value == 5
	val isSpOr12 get() = value == 4

}